---
import BaseLayout from "../../layouts/BaseLayout.astro";

const currentYear = new Date().getFullYear();
const startYear = 2022;
const endYear = currentYear + 1;
const years = new Array(endYear - startYear + 1);
for (let i = 0, y = endYear; i < years.length; i++, y--) years[i] = y;

const months = [
  "January", "February", "March", "April", "May", "June", 
  "July", "August", "September", "October", "November", "December"
];
---

<BaseLayout title="Xinwen Lianbo">
  <div class="h">
    <h1>Xinwen Lianbo</h1>
    <p><a href="/Library/">Back to Index</a></p>
  </div>

  <div class="c">
    {years.map(year => {
      const yearStr = String(year);
      return (
        <div class="y">
          <h2 class="t">{yearStr}</h2>
          <div class="g section-group">
            {months.map((month, idx) => {
              const monthNum = (idx + 1).toString().padStart(2, "0");
              const href = `/Library/news/${yearStr}/${monthNum}/`;
              return (
                <div class="month-item">
                  <a href={href}>{month}</a>
                </div>
              );
            })}
          </div>
          <p style="text-align:center;margin-top:20px">
            <a href={`/Library/news/${yearStr}/`} class="b">View</a>
          </p>
        </div>
      );
    })}
  </div>

  <div class="c">
    <h2>Disclaimer</h2>
    <p>
      This project employs publicly accessible textual content from the <a
        href="https://tv.cctv.com/"
        rel="noopener noreferrer">CCTV.com</a
      > (央视网) solely for non-commercial purposes, with all rights thereto reserved
      by the China Media Group (中央广播电视总台), and the authoritative source for
      verification remains <a
        href="https://tv.cctv.com/"
        rel="noopener noreferrer">tv.cctv.com</a
      >.
    </p>
  </div>
</BaseLayout>

<style>
  .h {
    margin-bottom: var(--fib-8);
    contain: content;
  }

  .h a {
    text-decoration: none;
    color: var(--color-secondary);
    font-weight: 500;
    transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .h a:hover {
    color: var(--color-primary);
    transform: scale(1.1);
  }

  .y {
    margin-bottom: var(--fib-13);
    contain: layout style;
  }

  .t {
    border-bottom: 2px solid var(--color-secondary);
    padding-bottom: var(--fib-3);
    margin-bottom: var(--fib-5);
    font-size: 1.5rem;
    font-weight: 600;
  }

  .g {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 15px;
    contain: layout style;
  }

  .month-item {
    text-align: center;
  }

  .month-item a {
    display: block;
    padding: 12px 8px;
    text-decoration: none;
    color: var(--color-secondary);
    font-weight: 500;
    font-size: 0.9rem;
    transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    border-radius: 3px;
  }

  .month-item a:hover {
    color: var(--color-primary);
    background: var(--color-badge-bg);
    transform: translateY(-1px);
  }

  .b {
    display: inline-flex;
    align-items: center;
    gap: var(--fib-2);
    padding: var(--fib-2) var(--fib-3);
    margin-top: var(--fib-5);
    text-decoration: none;
    color: var(--color-secondary);
    border-radius: var(--fib-1);
    font-size: 0.9rem;
    font-weight: 500;
    background: var(--color-badge-bg);
    border: 1px solid var(--color-border);
    transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    cursor: pointer;
    user-select: none;
    touch-action: manipulation;
  }

  .b:hover {
    color: var(--color-primary);
    background: var(--color-border);
    border-color: var(--color-secondary);
    transform: translateY(-1px);
  }
</style>

<script>
  const prefetch = (href) => {
    if (document.querySelector(`link[rel="prefetch"][href="${href}"]`)) return;
    const link = document.createElement("link");
    link.rel = "prefetch";
    link.href = href;
    document.head.appendChild(link);
  };

  const observer = "IntersectionObserver" in window
    ? new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const href = entry.target.href;
              if (href) {
                setTimeout(() => prefetch(href), 0);
                observer.unobserve(entry.target);
              }
            }
          });
        },
        { rootMargin: "200px", threshold: 0.1 }
      )
    : null;

  if (document.readyState !== "loading") {
    const links = document.querySelectorAll('a[href^="/Library/"]');
    if (observer) links.forEach(link => observer.observe(link));
  } else {
    document.addEventListener("DOMContentLoaded", () => {
      const links = document.querySelectorAll('a[href^="/Library/"]');
      if (observer) links.forEach(link => observer.observe(link));
    }, { once: true, passive: true });
  }
</script>
