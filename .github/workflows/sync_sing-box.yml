name: Sync sing-box

permissions:
  contents: write
  actions: write

on:
  schedule:
    - cron: "0 18 * * *"
  workflow_dispatch:
    inputs:
      sync:
        description: "Sync"
        type: boolean
        default: true
      build:
        description: "Build type"
        required: true
        type: choice
        default: "ALL"
        options:
          - ALL
          - Binary
          - macOS
          - SKIP
      version:
        description: "Version"
        type: string
        required: false

concurrency:
  group: sync-build-sing-box
  cancel-in-progress: true

env:
  UPSTREAM_REPO: "SagerNet/sing-box"
  UPSTREAM_BRANCH: "dev-next"

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      should_sync: ${{ steps.set_outputs.outputs.should_sync }}
      build_types: ${{ steps.set_outputs.outputs.build_types }}
    steps:
      - id: set_outputs
        run: |
          SHOULD_SYNC="${{ inputs.sync || 'true' }}"
          BUILD_MODE="${{ inputs.build || 'ALL' }}"

          if [ "$SHOULD_SYNC" != "true" ]; then
            SHOULD_SYNC=false
          else
            SHOULD_SYNC=true
          fi

          if [ "$BUILD_MODE" == "ALL" ]; then
            BUILD_TYPES='["binary","macos"]'
          elif [ "$BUILD_MODE" == "Binary" ]; then
            BUILD_TYPES='["binary"]'
          elif [ "$BUILD_MODE" == "macOS" ]; then
            BUILD_TYPES='["macos"]'
          else
            BUILD_TYPES='[]'
          fi

          echo "should_sync=$SHOULD_SYNC" >> "$GITHUB_OUTPUT"
          echo "build_types=$BUILD_TYPES" >> "$GITHUB_OUTPUT"

  sync:
    if: needs.plan.outputs.should_sync == 'true'
    runs-on: ubuntu-latest
    needs: plan
    outputs:
      changes: ${{ steps.sync.outputs.changes }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: "${{ secrets.PAT }}"
          ref: main
          submodules: recursive

      - id: sync
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global advice.detachedHead false

          cd sing-box

          git remote remove upstream 2>/dev/null || true
          git remote add upstream "https://github.com/${{ env.UPSTREAM_REPO }}.git"

          git fetch upstream "${{ env.UPSTREAM_BRANCH }}" --depth=1

          CURRENT_SHA=$(git rev-parse HEAD)
          UPSTREAM_SHA=$(git rev-parse "upstream/${{ env.UPSTREAM_BRANCH }}")

          if [ "$CURRENT_SHA" = "$UPSTREAM_SHA" ]; then
            echo "changes=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git checkout "$UPSTREAM_SHA"

          cd ..

          git add sing-box

          if git diff --staged --quiet; then
            echo "changes=false" >> "$GITHUB_OUTPUT"
          else
            git commit -m "feat(sing-box): bump ${UPSTREAM_SHA:0:7} [$(date -u +"%Y-%m-%dT%H:%M:%SZ")]"
            git remote set-url origin "https://user:${{ secrets.PAT }}@github.com/${{ github.repository }}.git"
            git push origin main
            echo "changes=true" >> "$GITHUB_OUTPUT"
            echo "upstream_sha=$UPSTREAM_SHA" >> "$GITHUB_ENV"
          fi

  build-binary:
    if: contains(needs.plan.outputs.build_types, 'binary') && needs.sync.outputs.changes == 'true'
    runs-on: macos-latest
    needs: sync
    steps:
      - uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0
          submodules: recursive

      - uses: actions/setup-go@v6
        with:
          go-version: "^1.25.3"
          cache: true

      - run: |
          cd sing-box
          VERSION='${{ inputs.version || github.sha }}'
          TAGS='with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale'

          go build -trimpath -ldflags="-s -w -buildid= -X github.com/sagernet/sing-box/constant.Version=$VERSION" -tags="$TAGS" -o sing-box ./cmd/sing-box

          PKG="sing-box-$VERSION-${{ runner.os }}-$(go env GOARCH)"
          mkdir "$PKG"
          cp LICENSE sing-box "$PKG/"

          if ! command -v zstd >/dev/null; then
            brew install zstd gnu-tar
          fi
          gtar --zstd -cf "$PKG.tar.zst" "$PKG"

      - uses: actions/upload-artifact@v5
        with:
          name: binary
          path: sing-box/*.tar.zst
          retention-days: 7

  build-macos:
    if: contains(needs.plan.outputs.build_types, 'macos') && needs.sync.outputs.changes == 'true'
    runs-on: macos-26
    needs: sync
    steps:
      - uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0
          submodules: recursive

      - uses: actions/setup-go@v6
        with:
          go-version: "^1.25.3"
          cache: true

      - run: |
          cd sing-box
          if [ ! -d "clients/apple" ]; then
            exit 0
          fi

          if ! command -v create-dmg >/dev/null; then
            brew install create-dmg zstd gnu-tar
          fi

          GOPATH_BIN="$(go env GOPATH)/bin"
          export PATH="$PATH:$GOPATH_BIN"

          make lib_install
          go run ./cmd/internal/build_libbox -target apple -platform macos
          mv Libbox.xcframework clients/apple/

          cd clients/apple
          [ -f "sing-box.xcodeproj/project.pbxproj" ] || exit 0

          sed -i '' 's/CODE_SIGN_STYLE = Automatic/CODE_SIGN_STYLE = Manual/g; s/CODE_SIGN_IDENTITY = .*/CODE_SIGN_IDENTITY = "";/g; s/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = "";/g' sing-box.xcodeproj/project.pbxproj

          xcodebuild build -scheme SFM.System -configuration Release -destination "generic/platform=macOS" -derivedDataPath ./DD CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO ONLY_ACTIVE_ARCH=NO

          APP=$(find . -name "*.app" -type d -print -quit)
          if [ -z "$APP" ]; then
            exit 0
          fi

          VERSION='${{ inputs.version || github.sha }}'
          DMG="SFM-$VERSION.dmg"
          create-dmg --volname "SFM" --app-drop-link 200 200 --skip-jenkins "$DMG" "$APP"

          mv "$DMG" ../../
          cd ../..
          gtar --zstd -cf "$DMG.tar.zst" "$DMG"

      - uses: actions/upload-artifact@v5
        with:
          name: macos
          path: sing-box/*.tar.zst
          retention-days: 7
          if-no-files-found: ignore
